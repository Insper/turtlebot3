#!/usr/bin/env python
#Report Status Bumper Turtlebot3 
#Autor: Licia Sales


import RPi.GPIO as GPIO
import time
import rospy
from std_msgs.msg import UInt8

pub = None
bumpis=0000
GPIO.setmode(GPIO.BCM)
GPIO.setup(26, GPIO.IN, pull_up_down=GPIO.PUD_UP)
GPIO.setup(19, GPIO.IN, pull_up_down=GPIO.PUD_UP)
GPIO.setup(13, GPIO.IN, pull_up_down=GPIO.PUD_UP)
GPIO.setup(6, GPIO.IN, pull_up_down=GPIO.PUD_UP)
lpid = 0

class LatchPublisher(rospy.Publisher, rospy.SubscribeListener):
    def __init__(self, name, data_class, tcp_nodelay=False, headers=None, queue_size=None):
        global lpid
        self.id = lpid
        lpid += 1
        print("Created LatchPublisher %d %s" % (self.id, name))
        super(LatchPublisher, self).__init__(name, data_class=data_class, tcp_nodelay=tcp_nodelay, headers=headers, queue_size=queue_size, subscriber_listener=self, latch=False)
        self.message = None

    def publish(self, msg):
        print("Publishing message %d" % self.id)
        self.message = msg
        super(LatchPublisher, self).publish(msg)

    def peer_subscribe(self, resolved_name, publish, publish_single):
        print("A subscriber attached to %d %s" % (self.id, resolved_name))
        if self.message is not None:
            print("  Publishing 'latched' message %d" % self.id)
            publish_single(self.message)
            print("  Published 'latched' message %d" % self.id)

def interrupt(channel):
    if channel == 26:
      	bumpis=1
        pub.publish(UInt8(bumpis))
    if channel == 19:
      	bumpis=2
        pub.publish(UInt8(bumpis))
    if channel == 13:
        bumpis=3
        print(bumpis)
        pub.publish(UInt8(bumpis))
    if channel == 6:
        bumpis=4 
        print(bumpis)
        pub.publish(UInt8(bumpis))

GPIO.add_event_detect(26, GPIO.RISING, callback=interrupt, bouncetime=1000)
GPIO.add_event_detect(19, GPIO.RISING, callback=interrupt, bouncetime=1000)
GPIO.add_event_detect(13,GPIO.RISING, callback=interrupt, bouncetime=1000)
GPIO.add_event_detect(6, GPIO.RISING, callback=interrupt, bouncetime=1000)


rospy.init_node('bumper')
pub = LatchPublisher("bumper", UInt8, queue_size=10)
rospy.spin()
GPIO.cleanup()
